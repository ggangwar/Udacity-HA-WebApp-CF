Description: >
  Server, security, and load-balance configurations.
  This template setup web servers and deploys the application code in private subnets spread across two Availability Zones. 
  It reads the application code from S3 bucket using IAM policy defined at EC2 level.
  It configures the LoadBalancer and AutoScaling policies for the web application.
  It setups the bastion hosts in public subnets spread across two Availability Zones in order to troubleshoot any issue.
  It collects reference of VPC, Route tables and Subnets in output section. 
  It configures the security group to put restriction on inbound traffic.
  It collects the DNS names of Load balancer and Bastion hosts along with IP address of bastion hosts.

Parameters:
  EnvironmentName:
    Description: Project name prefixed to resource names.
    Type: String

  WebAppServersMinSize:
    Description: Minimum number of web application servers
    Type: String
    Default: '2'

  WebAppServersMaxSize:
    Description: Maximum number of web application servers
    Type: String
    Default: '4'

  WebAppServersDesiredCapacity:
    Description: Desired initial number of web application servers
    Type: String
    Default: '4'

  S3CodeRepo:
    Description: Full S3 path and file name of zipped file
    Type: String
    Default: 's3://ha-webapp-iac/udacity.zip'

  KeyPairName:
    Description: Name of key-pair (PEM) file.
    Type: String
    Default: 'ha-webapp-iac'

Resources:
  SecurityGroupLoadBalancer:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for load-balancer
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName} LoadBalancer Security Group"

  SecurityGroupWebServer:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for web server
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref SecurityGroupLoadBalancer
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
      - SourceSecurityGroupId: !Ref SecurityGroupBastion
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName} WebServer Security Group"

  SecurityGroupBastion:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for bastion server
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName} Bastion Security Group"
  
  WebAppServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue: 
          Fn::Sub: "${EnvironmentName}-VPCID"

  WebAppServerAutoScalingLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          cd /var/www/html
          aws s3 cp s3://ha-webapp-iac/udacity.zip .
          unzip -o udacity.zip
          systemctl start apache2.service
      ImageId: ami-0f647ade69c261398
      IamInstanceProfile: !Ref ListBucketInstanceProfile
      SecurityGroups: 
      - Ref: SecurityGroupWebServer  
      InstanceType: t3.medium
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: "10"

  WebAppServerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName: !Ref WebAppServerAutoScalingLaunchConfig
      DesiredCapacity: !Ref WebAppServersDesiredCapacity
      MinSize: !Ref WebAppServersMinSize
      MaxSize: !Ref WebAppServersMaxSize
      TargetGroupARNs:
      - Ref: "WebAppServerTargetGroup"

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB-SN-1"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB-SN-2"
      SecurityGroups:
      - Ref: SecurityGroupLoadBalancer

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: "forward"
        TargetGroupArn: !Ref WebAppServerTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: "80"
      Protocol: "HTTP"

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: "forward"
        TargetGroupArn: !Ref WebAppServerTargetGroup
      Conditions:
      - Field: "path-pattern"
        Values: ["/"]
      ListenerArn: !Ref Listener
      Priority: "1"

  BastionPublicSubnet1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0f647ade69c261398
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      SubnetId:
        Fn::ImportValue: 
          Fn::Sub: "${EnvironmentName}-PUB-SN-1"
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      SecurityGroupIds:
        - Ref: SecurityGroupBastion
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Bastion Host 1

  BastionPublicSubnet2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0f647ade69c261398
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      SubnetId:
        Fn::ImportValue: 
          Fn::Sub: "${EnvironmentName}-PUB-SN-2"
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      SecurityGroupIds:
        - Ref: SecurityGroupBastion
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Bastion Host 2

  ListBucketInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: S3BucketRole

  S3BucketRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"

  S3BucketsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3BucketsPolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - s3:List*
          Resource: "*"
      Roles:
      - Ref: S3BucketRole


Outputs:
  LoadBalancerDNSName:
    Description: DNS Name of the web application
    Value: !Join [ "", [ "http://", !GetAtt LoadBalancer.DNSName ] ]
    Export:
      Name: !Sub "${EnvironmentName}-DNS-NAME"

  BastionHostIPPublicSubnet1:
    Description: IP address of bastion host in public subnet 1 
    Value: !GetAtt BastionPublicSubnet1.PublicIp
    Export:
      Name: !Sub "${EnvironmentName}-BASTION-HOST-IP-PUB-SN-1"

  BastionHostIPPublicSubnet2:
    Description: IP address of bastion host in public subnet 2 
    Value: !GetAtt BastionPublicSubnet2.PublicIp
    Export:
      Name: !Sub "${EnvironmentName}-BASTION-HOST-IP-PUB-SN-2"

  BastionHostDNSPublicSubnet1:
    Description: DNS address of bastion host in public subnet 1
    Value: !GetAtt BastionPublicSubnet1.PublicDnsName
    Export:
      Name: !Sub "${EnvironmentName}-BASTION-HOST-DNS-PUB-SN-1"

  BastionHostDNSPublicSubnet2:
    Description: DNS address of bastion host in public subnet 2
    Value: !GetAtt BastionPublicSubnet2.PublicDnsName
    Export:
      Name: !Sub "${EnvironmentName}-BASTION-HOST-DNS-PUB-SN-2"
